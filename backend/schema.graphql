# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  checkout(token: String!): Boolean
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCourseVideo(data: CourseVideoCreateInput!): CourseVideo
  createCourseVideos(data: [CourseVideoCreateInput!]!): [CourseVideo]
  updateCourseVideo(
    where: CourseVideoWhereUniqueInput!
    data: CourseVideoUpdateInput!
  ): CourseVideo
  updateCourseVideos(data: [CourseVideoUpdateArgs!]!): [CourseVideo]
  deleteCourseVideo(where: CourseVideoWhereUniqueInput!): CourseVideo
  deleteCourseVideos(where: [CourseVideoWhereUniqueInput!]!): [CourseVideo]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createSubscription(data: SubscriptionCreateInput!): Subscription
  createSubscriptions(data: [SubscriptionCreateInput!]!): [Subscription]
  updateSubscription(
    where: SubscriptionWhereUniqueInput!
    data: SubscriptionUpdateInput!
  ): Subscription
  updateSubscriptions(data: [SubscriptionUpdateArgs!]!): [Subscription]
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteSubscriptions(where: [SubscriptionWhereUniqueInput!]!): [Subscription]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  endSession: Boolean!
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

input CreateInitialUserInput {
  name: String
  password: String
  email: String
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

type User {
  id: ID!
  name: String
  password: PasswordState
  email: String
  isEducator: Boolean
  isAdmin: Boolean
  isSubscribed: String
  subscription: Subscription
  comment(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentCount(where: CommentWhereInput! = {}): Int
  rating(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  ratingCount(where: CourseWhereInput! = {}): Int
  coursestaken(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  coursestakenCount(where: CourseWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  password: String
  email: String
  isEducator: Boolean
  isAdmin: Boolean
  isSubscribed: String
  subscription: SubscriptionRelateToOneForUpdateInput
  comment: CommentRelateToManyForUpdateInput
  rating: CourseRelateToManyForUpdateInput
  coursestaken: CourseRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input SubscriptionRelateToOneForUpdateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
  disconnect: Boolean
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  password: String
  email: String
  isEducator: Boolean
  isAdmin: Boolean
  isSubscribed: String
  subscription: SubscriptionRelateToOneForCreateInput
  comment: CommentRelateToManyForCreateInput
  rating: CourseRelateToManyForCreateInput
  coursestaken: CourseRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input SubscriptionRelateToOneForCreateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

type CourseVideo {
  id: ID!
  video: FileFieldOutput
  thumbnail: String
  Course: Course
  description: String
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  src: String!
}

input CourseVideoWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  src: String!
}

input CourseVideoWhereInput {
  AND: [CourseVideoWhereInput!]
  OR: [CourseVideoWhereInput!]
  NOT: [CourseVideoWhereInput!]
  id: IDFilter
}

input CourseVideoOrderByInput {
  id: OrderDirection
}

input CourseVideoUpdateInput {
  video: FileFieldInput
  thumbnail: String
  Course: CourseRelateToOneForUpdateInput
  description: String
}

input FileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input CourseVideoUpdateArgs {
  where: CourseVideoWhereUniqueInput!
  data: CourseVideoUpdateInput!
}

input CourseVideoCreateInput {
  video: FileFieldInput
  thumbnail: String
  Course: CourseRelateToOneForCreateInput
  description: String
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

type Course {
  id: ID!
  title: String
  description: String
  status: CourseStatusType
  category: String
  author: User
  Videos(
    where: CourseVideoWhereInput! = {}
    orderBy: [CourseVideoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CourseVideo!]
  VideosCount(where: CourseVideoWhereInput! = {}): Int
  thumbnail: String
  comment(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentCount(where: CommentWhereInput! = {}): Int
  rating: Int
  ratingCount: Int
}

enum CourseStatusType {
  DRAFT
  AVAILABLE
  UNAVAILABLE
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  comment: CommentManyRelationFilter
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
}

input CourseUpdateInput {
  title: String
  description: String
  status: CourseStatusType
  category: String
  author: UserRelateToOneForUpdateInput
  Videos: CourseVideoRelateToManyForUpdateInput
  thumbnail: String
  comment: CommentRelateToManyForUpdateInput
  rating: Int
  ratingCount: Int
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CourseVideoRelateToManyForUpdateInput {
  disconnect: [CourseVideoWhereUniqueInput!]
  set: [CourseVideoWhereUniqueInput!]
  create: [CourseVideoCreateInput!]
  connect: [CourseVideoWhereUniqueInput!]
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  title: String
  description: String
  status: CourseStatusType
  category: String
  author: UserRelateToOneForCreateInput
  Videos: CourseVideoRelateToManyForCreateInput
  thumbnail: String
  comment: CommentRelateToManyForCreateInput
  rating: Int
  ratingCount: Int
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CourseVideoRelateToManyForCreateInput {
  create: [CourseVideoCreateInput!]
  connect: [CourseVideoWhereUniqueInput!]
}

type Subscription {
  id: ID!
  price: Int
  plan: String
  chargeId: String
  user: User
}

input SubscriptionWhereUniqueInput {
  id: ID
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  id: IDFilter
}

input SubscriptionOrderByInput {
  id: OrderDirection
}

input SubscriptionUpdateInput {
  price: Int
  plan: String
  chargeId: String
  user: UserRelateToOneForUpdateInput
}

input SubscriptionUpdateArgs {
  where: SubscriptionWhereUniqueInput!
  data: SubscriptionUpdateInput!
}

input SubscriptionCreateInput {
  price: Int
  plan: String
  chargeId: String
  user: UserRelateToOneForCreateInput
}

type Comment {
  id: ID!
  comment: String
  timestamp: String
  course: Course
  user(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  userCount(where: UserWhereInput! = {}): Int
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  course: CourseWhereInput
}

input CommentOrderByInput {
  id: OrderDirection
}

input CommentUpdateInput {
  comment: String
  timestamp: String
  course: CourseRelateToOneForUpdateInput
  user: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  comment: String
  timestamp: String
  course: CourseRelateToOneForCreateInput
  user: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  courseVideos(
    where: CourseVideoWhereInput! = {}
    orderBy: [CourseVideoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CourseVideo!]
  courseVideo(where: CourseVideoWhereUniqueInput!): CourseVideo
  courseVideosCount(where: CourseVideoWhereInput! = {}): Int
  courses(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  course(where: CourseWhereUniqueInput!): Course
  coursesCount(where: CourseWhereInput! = {}): Int
  subscriptions(
    where: SubscriptionWhereInput! = {}
    orderBy: [SubscriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Subscription!]
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
