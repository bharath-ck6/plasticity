// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String        @id @default(cuid())
  name                    String?
  password                String?
  email                   String?       @unique
  isEducator              Boolean?
  isAdmin                 Boolean?
  isSubscribed            String?
  subscription            Subscription? @relation("Subscription_user")
  comment                 Comment[]     @relation("Comment_user_User_comment")
  rating                  Course[]      @relation("User_rating_many")
  coursestaken            Course[]      @relation("User_coursestaken_many")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
  from_Course_author      Course[]      @relation("Course_author")
}

model CourseVideo {
  id             String  @id @default(cuid())
  video_filesize Int?
  video_mode     String?
  video_filename String?
  thumbnail      String?
  Course         Course? @relation("CourseVideo_Course", fields: [CourseId], references: [id])
  CourseId       String? @map("Course")
  description    String?

  @@index([CourseId])
}

model Course {
  id                     String            @id @default(cuid())
  title                  String?
  description            String?
  status                 CourseStatusType?
  category               String?
  author                 User?             @relation("Course_author", fields: [authorId], references: [id])
  authorId               String?           @map("author")
  Videos                 CourseVideo[]     @relation("CourseVideo_Course")
  thumbnail              String?
  comment                Comment[]         @relation("Comment_course")
  rating                 Int?
  ratingCount            Int?
  from_User_rating       User[]            @relation("User_rating_many")
  from_User_coursestaken User[]            @relation("User_coursestaken_many")

  @@index([authorId])
}

model Subscription {
  id       String  @id @default(cuid())
  price    Int?
  plan     String?
  chargeId String?
  user     User?   @relation("Subscription_user", fields: [userId], references: [id])
  userId   String? @unique @map("user")
}

model Comment {
  id        String    @id @default(cuid())
  comment   String?
  timestamp DateTime?
  course    Course?   @relation("Comment_course", fields: [courseId], references: [id])
  courseId  String?   @map("course")
  user      User[]    @relation("Comment_user_User_comment")

  @@index([courseId])
}

enum CourseStatusType {
  DRAFT
  AVAILABLE
  UNAVAILABLE
}